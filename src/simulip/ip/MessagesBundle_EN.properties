# Messages bundle for simulip.ip package

# for simulip.ip.RoutingTable.nextHop
# A route is selected
# {0} Router name, {1} destination IP address, {2} selected route, {3}: outcoming interface {1} destination IP address
selectRoute = {0} routing to {1} ; route\t[{2}] : selected\t-- out ifc: {3}

# A route is canditate with shorted metric for now
routeCanditateShorter = {0} routing to {1} ; route\t[{2}] : candidate shorter\t-- out ifc: {3}

# A route is possible but longer than previous candidate
routePossibleButLonger = {0} routing to {1} ; route\t[{2}] : possible but longer\t-- out ifc: {3}

# A route has target net dest, but out interface is not there (down, link broken...)
ifcMissingForRoute = {0} routing to {1} ; route\t[{2}] : out ifc: {3} is missing ! (broken link ?)

# Selected route has metric == 16
# {0} Router name, {1} destination IP address, {2} selected route
routeDown= {0} routing to {1} ; route\t[{2}] : candidate but down

# Selected a default route
# {0} Router name, {1} destination IP address, {2} selected route, {3}: outcoming interface {1} destination IP address
useDefault= {0} routing to {1} ; route\t[{2}] : default route selected\t-- out ifc: {3}

# Dest network of currently tested route does not contain dest ip address
# {0} Router name, {1} destination IP address, {2} selected route
notDestIp = {0} routing to {1} ; route\t[{2}] : does NOT match dest IP address

# No route has been found
# {0} Router name, {1} destination IP address
noFoundRoute= {0}: no route to {1} found
RoutingTable.nextHop.missingOutIfce= {0} : {1} out interface is missing, but used route table (check you configuration)

# for IpRouter.knock
# {0}: router name ; {1} datagram
IpRouter.knock.start= {0}: Start routing {1} datagram
# {0}: router name ; {1} datagram ; {2} outcoming ifc (IP addr) ; {3} mask ; {4} subnet addr
IpRouter.knock.matchOut= {0}: {1} matches  subnet for my outcoming ifce: {2}/{3}
# {0}: router name ; {1} datagram ; {2} outcoming ifc (IP addr) ;  {3} mask ; {bcast) Bcast
IpRouter.knock.matchOutBcast= {0}: {1} equals  bcast addr of my outcoming ifce: {2}/{3} : {4}
#{0}: router name ; {1} datagram
IpRouter.knock.deliver= {0}: deliver {1} to upper level
# {0}: router name ; {1} datagram ; {2} host address ; {3} mask
IpRouter.knock.notForMe= {0}: {1} is for my net but not for me ({2}/{3})
# {0}: router name ; {1}: datagram ; {2} host sub net address ; {3} mask
IpRouter.knock.notForMyNet= {0}: {1} is not for my net ({2}/{3})
# {0} router name ; {1} datagramm
IpRouter.knock.ttlExceeded= {0}: {1} TTL exceeded

# for RoutingTable.check()
 routeTableValidationStart = Start checking routing table for: {0}
 routeValidation = Checking route \#{0} [{1}]
 unexistingIfc= {0} is not an outcoming interface on this table's router
 
 # For NetworkMask cons
 NetworkMask.badValue= Bad value: {0}

 # For IpDatagram
 # {0} src addr ; {1} dst addr
 IpDatagram.toString.formatStr= [{0}->{1}]
 
 