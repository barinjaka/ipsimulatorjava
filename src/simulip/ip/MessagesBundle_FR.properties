# Frecnh Messages bundle for simulip.ip package

# for simulip.ip.RoutingTable.nextHop
# A route is selected
# {0} Router name, {1} destination IP address, {2} selected route, {3}: outcoming interface {1} destination IP address
selectRoute = {0} route vers {1} ; route\t[{2}] : s\él\éction\t-- out ifc: {3}

# A route is canditate with shorted metric for now
routeCanditateShorter = {0} route vers {1} ; route\t[{2}] : plus courte candidate\t-- out ifc: {3}

# A route is possible but longer than previous candidate
routePossibleButLonger = {0} route vers {1} ; route\t[{2}] : possible mais plus longue\t-- out ifc: {3}

# A route has target net dest, but out interface is not there (down, link broken...)
ifcMissingForRoute = {0} route vers {1} ; route\t[{2}] : out ifc: {3} maquante ! (perte de liaison ?)

# Selected route has metric == 16
# {0} Router name, {1} destination IP address, {2} selected route
routeDown= {0} route vers {1} ; route\t[{2}] : candidate mais rompue

# Selected a default route
# {0} Router name, {1} destination IP address, {2} selected route, {3}: outcoming interface {1} destination IP address
useDefault= {0} route vers {1} ; route\t[{2}] : route par d\éfaut s\él\éctionn\ée\t-- out ifc: {3}

# Dest network of currently tested route does not contain dest ip address
# {0} Router name, {1} destination IP address, {2} selected route
notDestIp = {0} route vers {1} ; route\t[{2}] : ne correspond pas \à l'adresse de destination

# No route has been found
# {0} Router name, {1} destination IP address
noFoundRoute= {0}: pas de route trouvé\ée vers {1}
RoutingTable.nextHop.missingOutIfce= {0} : {1} l'interface de sortie est manquante, mais utilis\ée (v\érifier la configuration)

# for IpRouter.knock
# {0}: router name ; {1} datagram
IpRouter.knock.start= {0}: Commence \à router {1} datagramme
# {0}: router name ; {1} datagram ; {2} outcoming ifc (IP addr) ; {3} mask ; {4} subnet addr
IpRouter.knock.matchOut= {0}: {1} correspond au son r\éseau de mon interface de sortie ifce: {2}/{3}
# {0}: router name ; {1} datagram ; {2} outcoming ifc (IP addr) ;  {3} mask ; {bcast) Bcast
IpRouter.knock.matchOutBcast= {0}: {1} eest \égale \à l'adresse de broadcast de l'interface de sortie: {2}/{3} : {4}
#{0}: router name ; {1} datagram
IpRouter.knock.deliver= {0}: d\élivr\ée {1} \à la couche sup\érieure
# {0}: router name ; {1} datagram ; {2} host address ; {3} mask
IpRouter.knock.notForMe= {0}: {1} est dans mon r\éseau mais pas pour moi ({2}/{3})
# {0}: router name ; {1}: datagram ; {2} host sub net address ; {3} mask
IpRouter.knock.notForMyNet= {0}: {1} n'est pas dans mon r\éseau ({2}/{3})
# {0} router name ; {1} datagramm
IpRouter.knock.ttlExceeded= {0}: {1} TTL expir\é

# for RoutingTable.check()
 routeTableValidationStart = Commen \à v\érifier la table de routage pour : {0}
 routeValidation = V\érifie la route n\°{0} [{1}]
 unexistingIfc= {0} n'est pas une interface de sortie de la table de routage de ce routeur
 
 # For NetworkMask cons
 NetworkMask.badValue= Mauvaise valeure: {0}

 # For IpDatagram
 # {0} src addr ; {1} dst addr
 IpDatagram.toString.formatStr= [{0}->{1}]
 
 